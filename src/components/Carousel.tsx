import React, { useState, useEffect } from 'react';
import { CardProps } from './ActivityCard';
import { Card } from './ActivityCard';

// Define the props type for the Carousel component
export interface CarouselProps {
  items: CardProps[];
}

// Carousel component definition
export const Carousel: React.FC<CarouselProps> = ({ items }) => {
  // State to track the current index of the carousel
  const [currentIndex, setCurrentIndex] = useState(0);
  // State to determine the number of cards to show based on screen size
  const [cardsToShow, setCardsToShow] = useState(3);

  // useEffect to set the number of cards to show based on screen width
  useEffect(() => {
    // Function to update the number of cards displayed based on window width
    const updateCardsToShow = () => {
      if (window.innerWidth < 768) {
        // For mobile screens, show 1 card
        setCardsToShow(1);
      } else if (window.innerWidth < 1024) {
        // For tablet screens, show 1 card
        setCardsToShow(1);
      } else {
        // For desktop screens, show 3 cards
        setCardsToShow(3);
      }
    };

    // Initial call to set the number of cards on component mount
    updateCardsToShow();

    // Add an event listener for window resize to adjust the number of cards dynamically
    window.addEventListener('resize', updateCardsToShow);
    // Cleanup function to remove the event listener when the component unmounts
    return () => window.removeEventListener('resize', updateCardsToShow);
  }, []);

  // Function to move to the next slide
  const nextSlide = () => {
    setCurrentIndex((prevIndex) => 
      (prevIndex + 1) % (items.length - cardsToShow + 1)
    );
  };

  // Function to move to the previous slide
  const prevSlide = () => {
    setCurrentIndex((prevIndex) => 
      (prevIndex - 1 + (items.length - cardsToShow + 1)) % (items.length - cardsToShow + 1)
    );
  };

  // Style to move the carousel based on the current index
  const carouselStyle = {
    transform: `translateX(-${currentIndex * (100 / cardsToShow)}%)`,
  };

  return (
    <div className="flex justify-center items-center">
      <div className="relative w-4/5 overflow-hidden">
        <div 
          className="flex transition-transform duration-500 ease-in-out" 
          style={carouselStyle}
        >
          {items.map((item, index) => {
            // Calculate the index of the currently centered card
            const middleIndex = currentIndex + Math.floor(cardsToShow / 2);

            return (
              <div
                key={`${item.title}-${index}`} // Key generated by combining the property "title" with the index "index" => Clé générée en combinant la propriété title avec l'index "index"
                className={`flex-shrink-0 px-2 py-4 transition-transform duration-300 ${
                  index === middleIndex
                    ? 'scale-105 z-10 shadow-lg' // Style to highlight the middle card
                    : 'scale-90 opacity-70' // Style for other cards
                }`}
                // Set dynamic width based on the number of cards to show
                style={{ width: `${100 / cardsToShow}%` }}
              >
                <div className="h-full flex justify-center items-center overflow-hidden">
                  <Card {...item} />
                </div>
              </div>
            );
          })}
        </div>
        {/* Button to move to the previous slide */}
        <button 
          type="button"
          onClick={prevSlide} 
          className="absolute left-4 ml-4 top-1/2 transform -translate-y-1/2 bg-[#7B0002] text-white p-2 rounded-full transition hover:bg-opacity-90 focus:outline-none active:bg-[#3E0A16]"
          aria-label="Previous"
        >
          &lsaquo;
        </button>
        {/* Button to move to the next slide */}
        <button 
        type="button"
          onClick={nextSlide} 
          className="absolute right-4 mr-4 top-1/2 transform -translate-y-1/2 bg-[#7B0002] text-white p-2 rounded-full transition hover:bg-opacity-90 focus:outline-none active:bg-[#3E0A16]"
          aria-label="Next"
        >
          &rsaquo;
        </button>
      </div>
    </div>
  );
};

export default Carousel;
